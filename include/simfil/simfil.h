// Copyright (c) Navigation Data Standard e.V. - See "LICENSE" file.

#pragma once

#include <vector>
#include <string_view>

#include "simfil/expression.h"
#include "simfil/environment.h"
#include "simfil/diagnostics.h"
#include "simfil/value.h"
#include "simfil/model/model.h"

namespace simfil
{

/**
 * Compile expression `src`.
 * Param:
 *   env  Environment used for compilation. Register custom functions there.
 * Param:
 *   src  Source code to compile into an expression-tree.
 * Param:
 *   any  If true, wrap expression with call to `any(...)`.
 * Param:
 *   autoWildcard  If true, expand constant expressions to `** = <const>`.
 */
auto compile(Environment& env, std::string_view src, bool any = true, bool autoWildcard = false) -> ASTPtr;

/**
 * Evaluate compiled expression.
 * Param:
 *   env    Environment (must be same as the one passed to compile!)
 * Param:
 *   ast    Expression-Tree generated by prior call to `compile(...)`
 * Param:
 *   node   Root node of the data model to query in
 * Param:
 *   diag   Optional pointer to a diagnostics object to merge results into.
 */
auto eval(Environment& env, const AST& ast, ModelNode const& node, Diagnostics* diag) -> std::vector<Value>;

/**
 * Build messages for diagnostics collected by `eval`.
 * Param:
 *   env    Environment (must be the same as the one passed to compile and eval)
 * Param:
 *   ast    The AST
 * Param:
 *   diag   Diagnostics data filled by eval.
 */
auto diagnostics(Environment& env, const AST& ast, const Diagnostics& diag) -> std::vector<Diagnostics::Message>;

/**
 * Find completion candidates for an expression.
 * Param:
 *   env   Environment used for compilation & evaluation.
 * Param:
 *   src   Source code to complete.
 * Param:
 *   point Index to complete at.
 * Param:
 *   node   Root node of the data model to query in
 */
auto complete(Environment& env, std::string_view src, size_t point, ModelNode const& node) -> std::vector<CompletionCandidate>;

}
